
def dash2(request):
    external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
    app = DjangoDash('dash2', external_stylesheets=external_stylesheets)
    DF_GAPMINDER = pd.read_csv(r'dashboard/static/20180823_BNESYD_3_2-1.csv')

    print ( '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
    duplicate_dict = dict((DF_GAPMINDER['is_duplicate'].value_counts()))

    app.layout = html.Div([
        html.H4('Gapminder DataTable'),
        dt.DataTable(
            rows=DF_GAPMINDER.to_dict('records'),

            # optional - sets the order of columns
            columns=sorted(DF_GAPMINDER.columns),

            row_selectable=True,
            filterable=True,
            sortable=True,
            selected_row_indices=[],
            id='datatable-gapminder'
        ),
        html.Div(id='selected-indexes'),
        dcc.Graph( id='graph-gapminder'),
        dcc.Graph( figure=go.Figure(data=[go.Pie(values=[duplicate_dict['Y'],duplicate_dict['N']], labels=['Duplicate','Unique']) ]))

    ], className="container")


    @app.callback(
        Output('datatable-gapminder', 'selected_row_indices'),
        [Input('graph-gapminder', 'clickData')],
        [State('datatable-gapminder', 'selected_row_indices')])
    def update_selected_row_indices(clickData, selected_row_indices):
        if clickData:
            for point in clickData['points']:
                if point['pointNumber'] in selected_row_indices:
                    selected_row_indices.remove(point['pointNumber'])
                else:
                    selected_row_indices.append(point['pointNumber'])
        return selected_row_indices


    @app.callback(
        Output('graph-gapminder', 'figure'),
        [Input('datatable-gapminder', 'rows'),
         Input('datatable-gapminder', 'selected_row_indices')])
    def update_figure(rows, selected_row_indices):
        dff = pd.DataFrame(rows)
        fig = plotly.tools.make_subplots( rows=3, cols=1, subplot_titles=('Time vs Fare',  'Population',), shared_xaxes=False,shared_yaxes=False)
        marker = {'color': ['#0074D9']*len(dff)}
        for i in (selected_row_indices or []):
            marker['color'][i] = '#FF851B'
        fig.append_trace({
            'x': dff[dff['provider']=='competitor']['fare'],
            'y': dff[dff['provider']=='competitor']['travel_time'],
            'type': 'scatter',
            'mode': 'markers',
            'name':'competitor',
            'marker': {'color':'blue'}
        }, 1, 1)

        fig.append_trace({
                    'x': dff[dff['provider']=='sabre']['fare'],
                    'y': dff[dff['provider']=='sabre']['travel_time'],
                    'type': 'scatter',
                    'mode': 'markers',
                    'name':'sabre',
                    'marker': {'color':'red'}
        }, 1, 1)

        fig.append_trace({
            'x':dff[dff['provider']=='competitor']['id'], #list(range(dff[dff['provider']=='competitor'].shape[0])),
            'y': [1 for i in list(range(dff[dff['provider']=='competitor'].shape[0]))],
            'type': 'bar',
            'name':'competitor',
            'marker': {'color':'blue'}


        } ,2, 1)
        fig.append_trace({
            'x': dff[dff['provider']=='sabre']['id'],#list(range(dff[dff['provider']=='sabre'].shape[0])),
            'y': [1 for i in list(range(dff[dff['provider']=='sabre'].shape[0]))],
            'type': 'bar',
            'name':'sabre',
            'marker': {'color':'red'}
        }, 2, 1)


        fig['layout']['showlegend'] = False
        fig['layout']['height'] = 800
        fig['layout']['margin'] = {
            'l': 40,
            'r': 10,
            't': 60,
            'b': 200
        }
        #fig['layout']['yaxis3']['type'] = 'log'
        return fig


    app.css.append_css({
        'external_url': 'https://codepen.io/chriddyp/pen/bWLwgP.css'
    })

    if __name__ == '__main__':
        app.run_server(debug=True)



    return render(request, 'dash2.html',{})




def dash22222(request):


    external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
    app = DjangoDash('dash2', external_stylesheets=external_stylesheets)
    DF_GAPMINDER = pd.read_csv(r'dashboard/static/1.csv')

    DF_WALMART= pd.read_csv(r'dashboard/static/2.csv')

    DF_GAPMINDER = DF_GAPMINDER[DF_GAPMINDER['year'] == 2007]
    DF_GAPMINDER.loc[0:20]

    DF_SIMPLE = pd.DataFrame({
        'x': ['A', 'B', 'C', 'D', 'E', 'F'],
        'y': [4, 3, 1, 2, 3, 6],
        'z': ['a', 'b', 'c', 'a', 'b', 'c']
    })

    ROWS = [
        {'a': 'AA', 'b': 1},
        {'a': 'AB', 'b': 2},
        {'a': 'BB', 'b': 3},
        {'a': 'BC', 'b': 4},
        {'a': 'CC', 'b': 5},
        {'a': 'CD', 'b': 6}
    ]


    app.layout = html.Div([
        html.H4('Gapminder DataTable'),
        dt.DataTable(
            rows=DF_GAPMINDER.to_dict('records'),

            # optional - sets the order of columns
            columns=sorted(DF_GAPMINDER.columns),

            row_selectable=True,
            filterable=True,
            sortable=True,
            selected_row_indices=[],
            id='datatable-gapminder'
        ),
        html.Div(id='selected-indexes'),
        dcc.Graph(
            id='graph-gapminder'
        ),
    ], className="container")


    @app.callback(
        Output('datatable-gapminder', 'selected_row_indices'),
        [Input('graph-gapminder', 'clickData')],
        [State('datatable-gapminder', 'selected_row_indices')])
    def update_selected_row_indices(clickData, selected_row_indices):
        if clickData:
            for point in clickData['points']:
                if point['pointNumber'] in selected_row_indices:
                    selected_row_indices.remove(point['pointNumber'])
                else:
                    selected_row_indices.append(point['pointNumber'])
        return selected_row_indices


    @app.callback(
        Output('graph-gapminder', 'figure'),
        [Input('datatable-gapminder', 'rows'),
         Input('datatable-gapminder', 'selected_row_indices')])
    def update_figure(rows, selected_row_indices):
        dff = pd.DataFrame(rows)
        fig = plotly.tools.make_subplots(
            rows=3, cols=1,
            subplot_titles=('Life Expectancy', 'GDP Per Capita', 'Population',),
            shared_xaxes=True)
        marker = {'color': ['#0074D9']*len(dff)}
        for i in (selected_row_indices or []):
            marker['color'][i] = '#FF851B'
        fig.append_trace({
            'x': dff['country'],
            'y': dff['lifeExp'],
            'type': 'bar',
            'marker': marker
        }, 1, 1)
        fig.append_trace({
            'x': dff['country'],
            'y': dff['gdpPercap'],
            'type': 'bar',
            'marker': marker
        }, 2, 1)
        fig.append_trace({
            'x': dff['country'],
            'y': dff['pop'],
            'type': 'bar',
            'marker': marker
        }, 3, 1)
        fig['layout']['showlegend'] = False
        fig['layout']['height'] = 800
        fig['layout']['margin'] = {
            'l': 40,
            'r': 10,
            't': 60,
            'b': 200
        }
        fig['layout']['yaxis3']['type'] = 'log'
        return fig


    app.css.append_css({
        'external_url': 'https://codepen.io/chriddyp/pen/bWLwgP.css'
    })

    if __name__ == '__main__':
        app.run_server(debug=True)



    return render(request, 'dash2.html',{})

def dash20(request):

    external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
    app = DjangoDash('dash2', external_stylesheets=external_stylesheets)


    app.layout = html.Div([
        dcc.Upload(
            id='upload-data',
            children=html.Div(['Drag and Drop or ', html.A('Select Files')]),
            style={'width': '100%', 'height': '60px','lineHeight': '60px','borderWidth': '1px','borderStyle': 'dashed',
                'borderRadius': '5px','textAlign': 'center', 'margin': '10px'
            },
            # Allow multiple files to be uploaded
            multiple=True
        ),
        html.Div(id='output-data-upload'),
        html.Div(dt.DataTable(rows=[{}],row_selectable=True, filterable=True, sortable=True,selected_row_indices=[], id='datatable'), style={'display': 'none'}),
        html.Div(dcc.Dropdown(id='field-dropdown', options=[
                                {'label': 'New York City', 'value': 'NYC'},
                                {'label': 'Montr√©al', 'value': 'MTL'},
                                {'label': 'San Francisco', 'value': 'SF'}
                            ],
            value='MTL'
        )),
        html.Div(id='selected-indexes'),
        dcc.Graph(
            id='graph-gapminder'
        )


    ], className="container")


    def parse_contents(contents, filename, date):
        content_type, content_string = contents.split(',')
        decoded = base64.b64decode(content_string)
        try:
            if 'csv' in filename:
                # Assume that the user uploaded a CSV file
                df = pd.read_csv(
                    io.StringIO(decoded.decode('utf-8')))
            elif 'xls' in filename:
                # Assume that the user uploaded an excel file
                df = pd.read_excel(io.BytesIO(decoded))
        except Exception as e:
            print(e)
            return html.Div([
                'There was an error processing this file.'
            ])

        return html.Div([
            html.H5(filename),
            html.H6(datetime.datetime.fromtimestamp(date)),
            # Use the DataTable prototype component:
            # github.com/plotly/dash-table-experiments
            dt.DataTable(rows=df.to_dict('records')),
            html.Hr(),  # horizontal line
            # For debugging, display the raw contents provided by the web browser
            html.Div('Raw Content'),
            html.Pre(contents[0:200] + '...', style={'whiteSpace': 'pre-wrap','wordBreak': 'break-all'})
        ])


    @app.callback(Output('output-data-upload', 'children'),
                  [Input('upload-data', 'contents')],
                  [State('upload-data', 'filename'),
                   State('upload-data', 'last_modified')])
    def update_output(list_of_contents, list_of_names, list_of_dates):
        if list_of_contents is not None:
            children = [
                parse_contents(c, n, d) for c, n, d in
                zip(list_of_contents, list_of_names, list_of_dates)]
            return children


    # 2. Update rows in a callback
    @app.callback(
    Output('graph-gapminder', 'figure'),
    [Input('datatable', 'rows')]) #, Input('datatable', 'selected_row_indices')
    def update_figure(rows):
        print (rows)


    if __name__ == '__main__':
        app.run_server(debug=True)

    return render(request, 'dash2.html',{})




def dash3(request):
    import base64
    import datetime
    import io

    import dash
    from dash.dependencies import Input, Output, State
    import dash_core_components as dcc
    import dash_html_components as html
    import dash_table_experiments as dt

    import pandas as pd


    external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']


    app = DjangoDash('uploadImage', external_stylesheets=external_stylesheets)
#    app.scripts.config.serve_locally = True

    app.layout = html.Div([
        dcc.Upload(
            id='upload-image',
            children=html.Div([
                'Drag and Drop or ',
                html.A('Select Files')
            ]),
            style={
                'width': '100%',
                'height': '60px',
                'lineHeight': '60px',
                'borderWidth': '1px',
                'borderStyle': 'dashed',
                'borderRadius': '5px',
                'textAlign': 'center',
                'margin': '10px'
            },
            # Allow multiple files to be uploaded
            multiple=True
        ),
        html.Div(id='output-image-upload'),
    ])


    def parse_contents(contents, filename, date):
        return html.Div([
            html.H5(filename),
            html.H6(datetime.datetime.fromtimestamp(date)),

            # HTML images accept base64 encoded strings in the same format
            # that is supplied by the upload
            html.Img(src=contents),
            html.Hr(),
            html.Div('Raw Content'),
            html.Pre(contents[0:200] + '...', style={
                'whiteSpace': 'pre-wrap',
                'wordBreak': 'break-all'
            })
        ])


    @app.callback(Output('output-image-upload', 'children'),
                  [Input('upload-image', 'contents')],
                  [State('upload-image', 'filename'),
                   State('upload-image', 'last_modified')])
    def update_output(list_of_contents, list_of_names, list_of_dates):
        if list_of_contents is not None:
            children = [
                parse_contents(c, n, d) for c, n, d in
                zip(list_of_contents, list_of_names, list_of_dates)]
            return children



    if __name__ == '__main__':
        app.run_server(debug=True)

    return render(request, 'dash2.html',{})


	
	def getapp33(file_path=r''):
    'https://codepen.io/chriddyp/pen/bWLwgP.css'
    app = DjangoDash('dash2', external_stylesheets='https://codepen.io/amyoshino/pen/jzXypZ.css',serve_locally=False)
    df = pd.read_csv(file_path)


    duplicate_dict = dict((df['is_duplicate'].value_counts()))

    app.layout = html.Div([
                    html.Div([ html.H4('Itinerary Table'),
                        html.Div([dt.DataTable( rows=df.to_dict('records'), row_selectable=True, filterable=True, sortable=True, selected_row_indices=[],
                        id='datatable-gapminder')
                    ], className="col col-md-2"),], style={'width':'100%','font-size':'0.8em'}),

                    html.Div([
                        dcc.Graph( figure=go.Figure(data=[go.Pie(values=[duplicate_dict['Y'],duplicate_dict['N']], labels=['Duplicate','Unique']) ]))
                    ], style={'width':'25%'}),
                    html.Div([
                        dcc.Graph( id='graph-gapminder'),
                     ], style={'width':'75%'})

                ], style={'width':'100%'})



    @app.callback(Output('datatable-gapminder', 'selected_row_indices'),[Input('graph-gapminder', 'clickData')],[State('datatable-gapminder', 'selected_row_indices')])
    def update_selected_row_indices(clickData, selected_row_indices):
        print ('asdasdasd')
        if clickData:
            for point in clickData['points']:
                if point['pointNumber'] in selected_row_indices:
                    selected_row_indices.remove(point['pointNumber'])
                else:
                    selected_row_indices.append(point['pointNumber'])
        return selected_row_indices


    @app.callback(Output('graph-gapminder', 'figure'),[Input('datatable-gapminder', 'rows'),Input('datatable-gapminder', 'selected_row_indices')])
    def update_figure(rows, selected_row_indices):
        dff = pd.DataFrame(rows)
        fig = plotly.tools.make_subplots( rows=3, cols=1, subplot_titles=('Time vs Fare',  'Population',), shared_xaxes=False,shared_yaxes=False)
        marker = {'color': ['#0074D9']*len(dff)}
        for i in (selected_row_indices or []):
            marker['color'][i] = '#FF851B'
        fig.append_trace({
            'x': dff[(dff['provider']=='competitor') & (dff['is_duplicate']=='N')]['fare'],
            'y': dff[(dff['provider']=='competitor') & (dff['is_duplicate']=='N')]['travel_time'],
            'type': 'scatter', 'mode': 'markers', 'name':'competitor', 'marker': {'color':'blue'}
        }, 1, 1)

        fig.append_trace({
                    'x': dff[(dff['provider']=='sabre') & (dff['is_duplicate']=='N') ]['fare'],
                    'y': dff[(dff['provider']=='sabre') & (dff['is_duplicate']=='N')]['travel_time'],
                    'type': 'scatter','mode': 'markers','name':'sabre','marker': {'color':'red'}
        }, 1, 1)

        fig.append_trace({
                    'x': dff[(dff['is_duplicate']=='Y') ]['fare'],
                    'y': dff[(dff['is_duplicate']=='Y')]['travel_time'],
                    'type': 'scatter','mode': 'markers','name':'overlap','marker': {'color':'green'}
        }, 1, 1)

        fig.append_trace({
            'x':dff[dff['provider']=='competitor']['id'], #list(range(dff[dff['provider']=='competitor'].shape[0])),
            'y': [1 for i in list(range(dff[dff['provider']=='competitor'].shape[0]))],
            'type': 'bar', 'name':'competitor','marker': {'color':'blue'}
        } ,2, 1)

        fig.append_trace({
            'x': dff[dff['provider']=='sabre']['id'],#list(range(dff[dff['provider']=='sabre'].shape[0])),
            'y': [1 for i in list(range(dff[dff['provider']=='sabre'].shape[0]))],
            'type': 'bar', 'name':'sabre','marker': {'color':'red'}
        }, 2, 1)


        fig['layout']['showlegend'] = False
        fig['layout']['height'] = 800


        return fig

    if __name__ == '__main__':
        app.run_server(debug=True)

    return app


def getapp2(file_path=r''):
    app = DjangoDash('dash2', external_stylesheets='https://codepen.io/chriddyp/pen/bWLwgP.css')
    df = pd.read_csv(file_path)
    duplicate_dict = dict((df['is_duplicate'].value_counts()))

    app.layout = html.Div([
        html.H4('Itinerary Table'),
        html.Div([dt.DataTable(
            rows=df.to_dict('records'), row_selectable=True, filterable=True, sortable=True, selected_row_indices=[], id='datatable-gapminder'
        )], className="col col-md-2"),
        html.Div([html.H3('TEST TEXT'),
        html.Div([
            html.Div([
                dcc.Graph( figure=go.Figure(data=[go.Pie(values=[duplicate_dict['Y'],duplicate_dict['N']], labels=['Duplicate','Unique']) ]))
            ], className="col"),

        ], className="col col-md-2")
        ], className="col col-md-2", id='selected-indexes'),
        dcc.Graph( id='graph-gapminder'),


    ], className="row justify-content-md-center")



    @app.callback(Output('datatable-gapminder', 'selected_row_indices'),[Input('graph-gapminder', 'clickData')],[State('datatable-gapminder', 'selected_row_indices')])
    def update_selected_row_indices(clickData, selected_row_indices):
        if clickData:
            for point in clickData['points']:
                if point['pointNumber'] in selected_row_indices:
                    selected_row_indices.remove(point['pointNumber'])
                else:
                    selected_row_indices.append(point['pointNumber'])
        return selected_row_indices


    @app.callback(Output('graph-gapminder', 'figure'),[Input('datatable-gapminder', 'rows'),Input('datatable-gapminder', 'selected_row_indices')])
    def update_figure(rows, selected_row_indices):
        dff = pd.DataFrame(rows)
        fig = plotly.tools.make_subplots( rows=3, cols=1, subplot_titles=('Time vs Fare',  'Population',), shared_xaxes=False,shared_yaxes=False)
        marker = {'color': ['#0074D9']*len(dff)}
        for i in (selected_row_indices or []):
            marker['color'][i] = '#FF851B'
        fig.append_trace({
            'x': dff[dff['provider']=='competitor']['fare'],
            'y': dff[dff['provider']=='competitor']['travel_time'],
            'type': 'scatter', 'mode': 'markers', 'name':'competitor', 'marker': {'color':'blue'}
        }, 1, 1)

        fig.append_trace({
                    'x': dff[dff['provider']=='sabre']['fare'],
                    'y': dff[dff['provider']=='sabre']['travel_time'],
                    'type': 'scatter','mode': 'markers','name':'sabre','marker': {'color':'red'}
        }, 1, 1)

        fig.append_trace({
            'x':dff[dff['provider']=='competitor']['id'], #list(range(dff[dff['provider']=='competitor'].shape[0])),
            'y': [1 for i in list(range(dff[dff['provider']=='competitor'].shape[0]))],
            'type': 'bar', 'name':'competitor','marker': {'color':'blue'}
        } ,2, 1)

        fig.append_trace({
            'x': dff[dff['provider']=='sabre']['id'],#list(range(dff[dff['provider']=='sabre'].shape[0])),
            'y': [1 for i in list(range(dff[dff['provider']=='sabre'].shape[0]))],
            'type': 'bar', 'name':'sabre','marker': {'color':'red'}
        }, 2, 1)


        fig['layout']['showlegend'] = False
        fig['layout']['height'] = 800


        return fig



    if __name__ == '__main__':
        app.run_server(debug=True)

    return app


